
DEFINE FUNCTION solitaire(arr):

    SET size TO len(arr)
    SET cells TO np.zeros((size,size+4), np.int8)
    SET sum_arr TO 0
    FOR i IN range(size):
        sum_arr+=arr[i]

    IF sum_arr != size-1 :
        RETURN -1

    IF size <= 2:
        RETURN -1

    IF size%2 != 0:
        RETURN -1

    IF arr[size-2]!=0 and arr[size-5] != 0:
        RETURN -1



    

    FOR x IN range (len(cells)):
        SET cells[x][0] TO 0
        SET cells[x][1] TO 0
        SET cells[x][len(cells[x])-1] TO 0
        SET cells[x][len(cells[x])-2] TO 0

        FOR y IN range(2,len(cells[x])-2):
            SET cells[x][y] TO -1
            if(x==0):
                SET cells[x][y] TO arr[y-2]

    

    FOR i IN range(1,len(cells)):
        SET no_ex TO 0                              
        SET lim TO (i-1)//2                         

 

        FOR z IN range(size+1, size+1-lim*2,-1):
            cells[i][z]=cells[i-1][z]

        FOR j IN range(size+1-lim*2,1,-1):

            IF no_ex >= 3:

                SET cells[i][j] TO cells[i-1][j]

                continue

            IF cells[i-1][j] EQUALS 1:

                SET cells[i][j] TO int(not(bool(cells[i-1][j+1] EQUALS 1 and cells[i-1][j+2] EQUALS 0 and j<size) or bool(cells[i-1][j-1] EQUALS 1 and cells[i-1][j-2] EQUALS 0 and j>3 )or bool((bool(cells[i-1][j-1]) ^ bool(cells[i-1][j+1]))and j!=2 and j!=size+1)))

            ELSE:

                SET cells[i][j] TO int((cells[i-1][j-1]==1 and cells[i-1][j-2] EQUALS 1) or (cells[i-1][j+1]==1 and cells[i-1][j+2]==1))

 
            if(bool(cells[i][j]) ^ bool(cells[i-1][j])):

                    no_ex+=1

    sum=0
    SET final_index TO -1

    FOR z IN range(len(cells[size-1])):

        sum+=cells[size-1][z]

        IF cells[size-1][z] EQUALS 1:

            SET final_index TO z

    IF sum EQUALS 1:
        OUTPUT(cells[size-1][2:size+2])

        RETURN final_index-2

    OUTPUT(cells)
    RETURN final_index-2







SET arr TO np.array([1,1,1,1,0,1], np.int8)

final_index= solitaire( arr)

OUTPUT(final_index)

