IMPORT re



DEFINE FUNCTION generateBoard(n):

    RETURN [1]*n



DEFINE FUNCTION solve(board):

    IF checkBoard(board):

        RETURN True

    ELSEIF checkUnsolvable(board):

        RETURN False



    SET moves TO []

    FOR i IN range(len(board)):

        IF i < len(board)-2:

            IF board[i] and board[i+1] and not board[i+2]:

                moves.append((i, 'right'))

        IF i > 1:

            IF board[i] and board[i-1] and not board[i-2]:

                moves.append((i, 'left'))

    

    FOR move IN moves:

        SET newBoard TO makeMove(board, move)

        IF solve(newBoard):

            RETURN True

        continue



    RETURN False





DEFINE FUNCTION makeMove(board, move):

    SET index, direction TO move

    SET b TO [element FOR element IN board]

    IF direction EQUALS 'right':

        SET b[index] TO 0

        SET b[index+1] TO 0

        SET b[index+2] TO 1

    ELSEIF direction EQUALS 'left':

        SET b[index] TO 0

        SET b[index-1] TO 0

        SET b[index-2] TO 1

    RETURN b



DEFINE FUNCTION checkBoard(board):

    IF sum(board) EQUALS 1:

        RETURN True

    RETURN False



DEFINE FUNCTION checkUnsolvable(board):

    SET expression1 TO '1000+1' #RE FOR a proven to be unsolvable board

    SET expression2 TO '00100'  #RE FOR a proven to be unsolvable board

    SET string TO ''.join([str(element) FOR element IN board])

    IF re.search(expression1, string) or re.search(expression2, string):

        RETURN True

    RETURN False



DEFINE FUNCTION countSolutions(board):

    SET indices TO []

    FOR i IN range(len(board)):

        SET b TO [element FOR element IN board]

        SET b[i] TO 0

        IF solve(b):

            indices.append(i+1)

    RETURN indices





SET n TO int(INPUT())

OUTPUT(countSolutions(generateBoard(n)))
